#!/usr/bin/env php
<?php

declare(strict_types=1);

use Koriym\AppStateDiagram\ConfigFactory;
use Koriym\AppStateDiagram\Diagram;
use Koriym\AppStateDiagram\Exception\AlpsFileNotReadableException;
use Koriym\AppStateDiagram\PutDiagram;
use Koriym\DataFile\Exception\DataFileNotFoundException;

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;

        break;
    }
}
if ($argc === 1) {
    echo <<<EOT
usage: asd [options] alps_file
@see https://github.com/alps-asd/app-state-diagram#usage

EOT;
    exit(0);
}
$options = getopt('c:e::w::m::', ['config:', 'echo::', 'watch::', 'mode::', 'port::']);
if ($argc === 1) {
    $options['c'] = getcwd();
}
try {
    $configOption = $options['c'] ?? $options['config'] ?? null;
    $config = $configOption !== null ? ConfigFactory::fromFile($configOption, $argc, $argv, $options) : ConfigFactory::fromCommandLine($argc, $argv, $options);
} catch (DataFileNotFoundException $e) {
    printf('Config file not found: %s', $e->getMessage());
    exit(1);
} catch (AlpsFileNotReadableException $e) {
    printf('Profile file not found: %s', $e->getMessage());
    exit(1);
}
if ($config->watch) {
    $pharRunning = Phar::running(false);
    if ($pharRunning !== '') {
        // PHAR実行時：asdwと同じ仕組みを使用
        // PHARファイルのlibexecディレクトリ内のasd-syncを探す
        $pharDir = dirname($pharRunning);
        $actualPath = $pharDir . '/asd-sync';
        
        // Homebrewのlibexec構造: /opt/homebrew/Cellar/asd/x.x.x/libexec/asd-sync
        if (!is_dir($actualPath) && basename($pharDir) === 'libexec') {
            $actualPath = $pharDir . '/asd-sync';
        }
        
        // まだ見つからない場合は他の可能性を探す
        if (!is_dir($actualPath)) {
            $possiblePaths = [
                dirname($pharDir) . '/libexec/asd-sync',
                dirname(dirname($pharDir)) . '/libexec/asd-sync'
            ];
            foreach ($possiblePaths as $path) {
                if (is_dir($path)) {
                    $actualPath = $path;
                    break;
                }
            }
        }
    } else {
        // 通常の開発環境での実行
        $actualPath = dirname(__DIR__) . '/asd-sync';
    }
    
    if (!is_dir($actualPath)) {
        echo "Error: asd-sync directory not found. Watch mode requires Node.js components.\n";
        echo "Try using 'asdw' command instead if you installed via Homebrew.\n";
        exit(1);
    }
    
    chdir($actualPath);
    $nodeModulesPath = $actualPath . '/node_modules';
    $isFirstRun = !is_dir($nodeModulesPath);
    if ($isFirstRun) {
        echo "Installing Node.js dependencies...\n";
        passthru('npm install');
    }

    passthru("npm start -- --profile {$config->profile} --port {$config->port}");
    exit(0);
}

try {
    $index = (new Diagram())($config);
    $isEcho =  (isset($options['e']) || isset($options['echo']));
    if ($isEcho) {
        echo $index->content;
        exit;
    }
    file_put_contents($index->file, $index->content);
    echo "ASD generated. {$index->file}" . PHP_EOL;
} catch (Exception $e) {
    $shortName = (new \ReflectionClass($e))->getShortName();
    $msg = sprintf("asd: %s(%s)",$shortName, $e->getMessage());
    file_put_contents('php://stderr', $msg . PHP_EOL);
    exit(1);
}
